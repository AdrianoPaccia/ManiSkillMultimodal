diff --git a/scripts/baselines/sac_TWN/sac.py b/scripts/baselines/sac_TWN/sac.py
index 0bd65d6..8eaaf6e 100644
--- a/scripts/baselines/sac_TWN/sac.py
+++ b/scripts/baselines/sac_TWN/sac.py
@@ -338,13 +338,12 @@ if __name__ == "__main__":
         'run_name':run_name,
         'game':'manipulation',
         'checkpoint_dir': os.path.join(os.getcwd(), 'test_runs'),
-        'num_steps': 300, #args.num_steps,
-        'save_video_freq':args.save_train_video_freq,
         'partial_reset': args.partial_reset,
         'noise_frequency': 0.0,
         'image_noise_types': ['nonoise'],
         'conf_noise_types': ['nonoise'],
-        'frames': 2
+        'frames': 2,
+        'eval_steps': args.num_eval_steps,
     }
 
     eval_envs = build_eval_env(
diff --git a/scripts/environments/build.py b/scripts/environments/build.py
index 6d5998b..012673b 100644
--- a/scripts/environments/build.py
+++ b/scripts/environments/build.py
@@ -15,8 +15,7 @@ def build_training_env(
         control_mode="pd_joint_delta_pos",
         render_mode="rgb_array",
         sim_backend:str="gpu",
-        capture_video:bool=False,
-        **kwargs #[run_name, checkpoint_dir, num_steps, save_video_freq][partial_reset:bool]
+        **kwargs
     ):
     """
     Args:
@@ -27,19 +26,14 @@ def build_training_env(
         render_mode: ["human", "rgb_array", "None"]
         sim_backend: ["cpu", "gpu"]
         capture_video:bool
-        **kwarg: [run_name, num_steps, save_video_freq, partial_reset:bool, img_shape]
+        **kwarg: [run_name, partial_reset:bool]
     Returns: training environment
     """
     env_kwargs = dict(obs_mode=obs_mode, control_mode=control_mode, render_mode=render_mode, sim_backend=sim_backend)
     envs = gym.make(id, num_envs=num_envs, **env_kwargs)
     if isinstance(envs.action_space, gym.spaces.Dict):
         envs = FlattenActionSpaceWrapper(envs)
-    if capture_video:
-        save_video_trigger = lambda x: (x // kwargs['num_steps']) % kwargs['save_video_freq'] == 0
-        envs = RecordEpisode(envs, output_dir=f"runs/{kwargs['run_name']}/train_videos", save_trajectory=False,
-                             save_video_trigger=save_video_trigger, max_steps_per_video=kwargs['num_steps'], video_fps=30)
     envs = ManiSkillVectorEnv(envs, num_envs, ignore_terminations=not kwargs['partial_reset'], **env_kwargs)
-
     game = kwargs['game']
     with open(f'{os.path.dirname(os.path.realpath(__file__))}/configuration.yaml', "r") as file:
         kwargs = {**kwargs, **yaml.safe_load(file)[str(game)]}
@@ -75,17 +69,12 @@ def build_eval_env(
     envs = gym.make(id, num_envs=num_envs, **env_kwargs)
     if isinstance(envs.action_space, gym.spaces.Dict):
         envs = FlattenActionSpaceWrapper(envs)
-    n_steps = kwargs['num_steps']
     if capture_video:
-        run_name = kwargs['run_name']
-        video_dir = f"runs/{run_name}/videos"
-        output_dir = f"{kwargs['checkpoint_dir']}/test_videos"
         print(f"Saving eval videos to {kwargs['checkpoint_dir']}")
-        envs = RecordEpisode(envs, output_dir=os.path.join(output_dir,'test_video'), save_trajectory=True, trajectory_name="trajectory",
-                                  max_steps_per_video=n_steps, video_fps=30)
-
-    envs = ManiSkillVectorEnv(envs, n_steps, ignore_terminations=not kwargs['partial_reset'], **env_kwargs)
+        envs = RecordEpisode(envs, output_dir=f"runs/{kwargs['run_name']}/train_videos", save_trajectory=True, trajectory_name="trajectory",
+                                  max_steps_per_video=kwargs['eval_steps'], video_fps=30)
 
+    envs = ManiSkillVectorEnv(envs, num_envs, ignore_terminations=not kwargs['partial_reset'], **env_kwargs)
 
     game = kwargs['game']
     with open(f'{os.path.dirname(os.path.realpath(__file__))}/configuration.yaml', "r") as file:
