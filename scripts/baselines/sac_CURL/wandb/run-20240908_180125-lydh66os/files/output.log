Saving eval videos to /home/adriano/Desktop/ManiSkillMultimodal/scripts/baselines/sac_CURL/test_runs
action_space: Box(-1.0, 1.0, (8, 8), float32)
auto_reset: True
base_env: <PushCubeEnv<PushCube-v1>>
call: <bound method ManiSkillVectorEnv.call of ManiSkillVectorEnv(PushCube-v1, 8)>
call_async: <bound method VectorEnv.call_async of ManiSkillVectorEnv(PushCube-v1, 8)>
call_wait: <bound method VectorEnv.call_wait of ManiSkillVectorEnv(PushCube-v1, 8)>
close: <bound method ManiSkillVectorEnv.close of ManiSkillVectorEnv(PushCube-v1, 8)>
close_extras: <bound method VectorEnv.close_extras of ManiSkillVectorEnv(PushCube-v1, 8)>
closed: False
device: cuda
get_attr: <bound method ManiSkillVectorEnv.get_attr of ManiSkillVectorEnv(PushCube-v1, 8)>
get_wrapper_attr: <bound method Env.get_wrapper_attr of ManiSkillVectorEnv(PushCube-v1, 8)>
ignore_terminations: True
is_vector_env: True
metadata: {'render_modes': []}
np_random: Generator(PCG64)
num_envs: 8
observation_space: Dict('agent': Dict('qpos': Box(-inf, inf, (8, 9), float32), 'qvel': Box(-inf, inf, (8, 9), float32)), 'extra': Dict('tcp_pose': Box(-inf, inf, (8, 7), float32)), 'sensor_param': Dict('base_camera': Dict('extrinsic_cv': Box(-inf, inf, (8, 3, 4), float32), 'cam2world_gl': Box(-inf, inf, (8, 4, 4), float32), 'intrinsic_cv': Box(-inf, inf, (8, 3, 3), float32))), 'sensor_data': Dict('base_camera': Dict('rgb': Box(0, 255, (8, 128, 128, 3), uint8), 'depth': Box(-32768, 32767, (8, 128, 128, 1), int16), 'segmentation': Box(-32768, 32767, (8, 128, 128, 1), int16))))
render: <bound method ManiSkillVectorEnv.render of ManiSkillVectorEnv(PushCube-v1, 8)>
render_mode: None
reset: <bound method ManiSkillVectorEnv.reset of ManiSkillVectorEnv(PushCube-v1, 8)>
reset_async: <bound method VectorEnv.reset_async of ManiSkillVectorEnv(PushCube-v1, 8)>
reset_wait: <bound method VectorEnv.reset_wait of ManiSkillVectorEnv(PushCube-v1, 8)>
returns: tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
reward_range: (-inf, inf)
set_attr: <bound method VectorEnv.set_attr of ManiSkillVectorEnv(PushCube-v1, 8)>
single_action_space: Box(-1.0, 1.0, (8,), float32)
single_observation_space: Dict('agent': Dict('qpos': Box(-inf, inf, (9,), float32), 'qvel': Box(-inf, inf, (9,), float32)), 'extra': Dict('tcp_pose': Box(-inf, inf, (7,), float32)), 'sensor_param': Dict('base_camera': Dict('extrinsic_cv': Box(-inf, inf, (3, 4), float32), 'cam2world_gl': Box(-inf, inf, (4, 4), float32), 'intrinsic_cv': Box(-inf, inf, (3, 3), float32))), 'sensor_data': Dict('base_camera': Dict('rgb': Box(0, 255, (128, 128, 3), uint8), 'depth': Box(-32768, 32767, (128, 128, 1), int16), 'segmentation': Box(-32768, 32767, (128, 128, 1), int16))))
spec: EnvSpec(id='PushCube-v1', entry_point=functools.partial(<function make at 0x7fd97684d4c0>, env_id='PushCube-v1'), reward_threshold=None, nondeterministic=False, max_episode_steps=None, order_enforce=True, autoreset=False, disable_env_checker=True, apply_api_compatibility=False, kwargs={'num_envs': 8, 'obs_mode': 'rgb+depth+segmentation', 'control_mode': 'pd_joint_delta_pos', 'render_mode': 'rgb_array', 'sim_backend': 'cuda', 'render_backend': 'cuda'}, namespace=None, name='PushCube', version=1, additional_wrappers=(WrapperSpec(name='TimeLimitWrapper', entry_point='mani_skill.utils.registration:TimeLimitWrapper', kwargs=None), WrapperSpec(name='RecordEpisode', entry_point='mani_skill.utils.wrappers.record:RecordEpisode', kwargs=None)), vector_entry_point=functools.partial(<function make_vec at 0x7fd97684d700>, env_id='PushCube-v1'))
step: <bound method ManiSkillVectorEnv.step of ManiSkillVectorEnv(PushCube-v1, 8)>
step_async: <bound method VectorEnv.step_async of ManiSkillVectorEnv(PushCube-v1, 8)>
step_wait: <bound method VectorEnv.step_wait of ManiSkillVectorEnv(PushCube-v1, 8)>
unwrapped: <PushCubeEnv<PushCube-v1>>
viewer: None
action_space: Box(-1.0, 1.0, (8, 8), float32)
auto_reset: True
base_env: <PushCubeEnv<PushCube-v1>>
call: <bound method ManiSkillVectorEnv.call of ManiSkillVectorEnv(PushCube-v1, 8)>
call_async: <bound method VectorEnv.call_async of ManiSkillVectorEnv(PushCube-v1, 8)>
call_wait: <bound method VectorEnv.call_wait of ManiSkillVectorEnv(PushCube-v1, 8)>
close: <bound method ManiSkillVectorEnv.close of ManiSkillVectorEnv(PushCube-v1, 8)>
close_extras: <bound method VectorEnv.close_extras of ManiSkillVectorEnv(PushCube-v1, 8)>
closed: False
device: cuda
get_attr: <bound method ManiSkillVectorEnv.get_attr of ManiSkillVectorEnv(PushCube-v1, 8)>
get_wrapper_attr: <bound method Env.get_wrapper_attr of ManiSkillVectorEnv(PushCube-v1, 8)>
ignore_terminations: True
is_vector_env: True
metadata: {'render_modes': []}
np_random: Generator(PCG64)
num_envs: 8
observation_space: Dict('agent': Dict('qpos': Box(-inf, inf, (8, 9), float32), 'qvel': Box(-inf, inf, (8, 9), float32)), 'extra': Dict('tcp_pose': Box(-inf, inf, (8, 7), float32)), 'sensor_param': Dict('base_camera': Dict('extrinsic_cv': Box(-inf, inf, (8, 3, 4), float32), 'cam2world_gl': Box(-inf, inf, (8, 4, 4), float32), 'intrinsic_cv': Box(-inf, inf, (8, 3, 3), float32))), 'sensor_data': Dict('base_camera': Dict('rgb': Box(0, 255, (8, 128, 128, 3), uint8), 'depth': Box(-32768, 32767, (8, 128, 128, 1), int16), 'segmentation': Box(-32768, 32767, (8, 128, 128, 1), int16))))
render: <bound method ManiSkillVectorEnv.render of ManiSkillVectorEnv(PushCube-v1, 8)>
render_mode: None
reset: <bound method ManiSkillVectorEnv.reset of ManiSkillVectorEnv(PushCube-v1, 8)>
reset_async: <bound method VectorEnv.reset_async of ManiSkillVectorEnv(PushCube-v1, 8)>
reset_wait: <bound method VectorEnv.reset_wait of ManiSkillVectorEnv(PushCube-v1, 8)>
returns: tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
reward_range: (-inf, inf)
set_attr: <bound method VectorEnv.set_attr of ManiSkillVectorEnv(PushCube-v1, 8)>
single_action_space: Box(-1.0, 1.0, (8,), float32)
single_observation_space: Dict('agent': Dict('qpos': Box(-inf, inf, (9,), float32), 'qvel': Box(-inf, inf, (9,), float32)), 'extra': Dict('tcp_pose': Box(-inf, inf, (7,), float32)), 'sensor_param': Dict('base_camera': Dict('extrinsic_cv': Box(-inf, inf, (3, 4), float32), 'cam2world_gl': Box(-inf, inf, (4, 4), float32), 'intrinsic_cv': Box(-inf, inf, (3, 3), float32))), 'sensor_data': Dict('base_camera': Dict('rgb': Box(0, 255, (128, 128, 3), uint8), 'depth': Box(-32768, 32767, (128, 128, 1), int16), 'segmentation': Box(-32768, 32767, (128, 128, 1), int16))))
spec: EnvSpec(id='PushCube-v1', entry_point=functools.partial(<function make at 0x7fd97684d4c0>, env_id='PushCube-v1'), reward_threshold=None, nondeterministic=False, max_episode_steps=None, order_enforce=True, autoreset=False, disable_env_checker=True, apply_api_compatibility=False, kwargs={'num_envs': 8, 'obs_mode': 'rgb+depth+segmentation', 'control_mode': 'pd_joint_delta_pos', 'render_mode': 'rgb_array', 'sim_backend': 'cuda', 'render_backend': 'cuda'}, namespace=None, name='PushCube', version=1, additional_wrappers=(WrapperSpec(name='TimeLimitWrapper', entry_point='mani_skill.utils.registration:TimeLimitWrapper', kwargs=None),), vector_entry_point=functools.partial(<function make_vec at 0x7fd97684d700>, env_id='PushCube-v1'))
step: <bound method ManiSkillVectorEnv.step of ManiSkillVectorEnv(PushCube-v1, 8)>
step_async: <bound method VectorEnv.step_async of ManiSkillVectorEnv(PushCube-v1, 8)>
step_wait: <bound method VectorEnv.step_wait of ManiSkillVectorEnv(PushCube-v1, 8)>
unwrapped: <PushCubeEnv<PushCube-v1>>
viewer: None
... replay buffer setup
/home/adriano/miniconda3/envs/MSM/lib/python3.9/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.max_episode_steps to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.max_episode_steps` for environment variables or `env.get_wrapper_attr('max_episode_steps')` that will search the reminding wrappers.
  logger.warn(
/home/adriano/miniconda3/envs/MSM/lib/python3.9/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.single_observation_space to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.single_observation_space` for environment variables or `env.get_wrapper_attr('single_observation_space')` that will search the reminding wrappers.
  logger.warn(
/home/adriano/miniconda3/envs/MSM/lib/python3.9/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.single_action_space to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.single_action_space` for environment variables or `env.get_wrapper_attr('single_action_space')` that will search the reminding wrappers.
